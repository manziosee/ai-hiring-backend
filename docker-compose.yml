version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-hiring-postgres
    environment:
      POSTGRES_DB: ai_hiring_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_hiring_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-hiring-network

  redis:
    image: redis:7-alpine
    container_name: ai-hiring-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ai-hiring-network

  ml-service:
    build: 
      context: ./microservices/ml-service
      dockerfile: Dockerfile
    container_name: ai-hiring-ml
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/ai_hiring_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-hiring-network

  email-service:
    build: 
      context: ./microservices/email-service
      dockerfile: Dockerfile
    container_name: ai-hiring-email
    ports:
      - "3002:3002"
    environment:
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-hiring-network

  main-api:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-hiring-api
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/ai_hiring_db
      - JWT_SECRET=${JWT_SECRET}
      - ML_SERVICE_HOST=ml-service
      - ML_SERVICE_PORT=8000
      - EMAIL_SERVICE_HOST=email-service
      - EMAIL_SERVICE_PORT=3002
      - REDIS_URL=redis://redis:6379
      - APP_URL=${APP_URL:-http://localhost:3000}
      - NODE_ENV=production
      - THROTTLE_TTL=${THROTTLE_TTL:-60000}
      - THROTTLE_LIMIT=${THROTTLE_LIMIT:-10}
      - FILE_UPLOAD_MAX_SIZE=${FILE_UPLOAD_MAX_SIZE:-10485760}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-service:
        condition: service_healthy
      email-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - uploads_data:/app/uploads
    networks:
      - ai-hiring-network

  nginx:
    image: nginx:alpine
    container_name: ai-hiring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - main-api
    restart: unless-stopped
    networks:
      - ai-hiring-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  ai-hiring-network:
    driver: bridge