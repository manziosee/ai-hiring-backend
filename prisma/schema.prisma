generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  RECRUITER
  CANDIDATE
}

enum ApplicationStatus {
  PENDING
  SUBMITTED
  SCREENING
  INTERVIEW
  OFFER
  ACCEPTED
  REJECTED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  jobs             Job[]         @relation("JobCreator")
  interviews       Interview[]   @relation("InterviewScheduler")
  candidateProfile Candidate?
  applications     Application[]

  @@map("users")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  skills      String[]
  experience  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy    String
  creator      User          @relation("JobCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Candidate {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  location  String?
  resumeUrl String?
  skills    String[]
  yearsExp  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("candidates")
}

model Application {
  id          String            @id @default(cuid())
  status      ApplicationStatus @default(SUBMITTED)
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  jobId            String
  job              Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidateId      String
  candidate        Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  screeningResults ScreeningResult[]
  interviews       Interview[]

  @@unique([jobId, candidateId])
  @@map("applications")
}

model ScreeningResult {
  id        String   @id @default(cuid())
  stage     String
  fitScore  Float
  details   Json
  createdAt DateTime @default(now())

  // Relations
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("screening_results")
}

model Interview {
  id          String   @id @default(cuid())
  scheduledAt DateTime
  mode        String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  scheduledById String
  scheduledBy   User        @relation("InterviewScheduler", fields: [scheduledById], references: [id], onDelete: Cascade)

  @@map("interviews")
}
